# Environment Configuration Example
# Copy this file to .env and configure for your environment

# =============================================================================
# ASYNC DATABASE CONFIGURATION
# =============================================================================
# Modern async-first architecture - choose ONE database below

# -----------------------------------------------------------------------------
# PRODUCTION DATABASES
# -----------------------------------------------------------------------------

# PostgreSQL with AsyncPG - Recommended for production applications
# DATABASE_URL=postgresql+asyncpg://user:password@localhost:5432/myapp_dev

# MySQL with aiomysql - Alternative production database
# DATABASE_URL=mysql+aiomysql://user:password@localhost:3306/myapp_dev

# -----------------------------------------------------------------------------
# DEVELOPMENT & TESTING
# -----------------------------------------------------------------------------

# SQLite with aiosqlite - Perfect for local development and testing
# DATABASE_URL=sqlite+aiosqlite:///data/app.db

# SQLite in-memory - Ideal for unit tests (fastest)
# DATABASE_URL=sqlite+aiosqlite:///:memory:

# -----------------------------------------------------------------------------
# PRODUCTION EXAMPLES
# -----------------------------------------------------------------------------

# Production PostgreSQL with SSL and connection pooling
# DATABASE_URL=postgresql+asyncpg://app_user:secure_password@db.example.com:5432/myapp_prod?ssl=require

# Production MySQL with SSL
# DATABASE_URL=mysql+aiomysql://app_user:secure_password@mysql.example.com:3306/myapp_prod?ssl=true

# =============================================================================
# DATABASE CONNECTION POOL SETTINGS
# =============================================================================
# Fine-tune connection pooling for your workload

# Connection pool size (number of connections to maintain)
DATABASE_POOL_SIZE=5

# Maximum overflow connections beyond pool size
DATABASE_MAX_OVERFLOW=10

# Connection timeout in seconds
DATABASE_POOL_TIMEOUT=30

# Connection recycle time in seconds (prevents stale connections)
DATABASE_POOL_RECYCLE=3600

# =============================================================================
# DATABASE DEBUGGING
# =============================================================================

# Enable SQL query logging (useful for development, disable in production)
SQL_ECHO=false

# =============================================================================
# APPLICATION SETTINGS
# =============================================================================

# Test configuration (leave as default)
TEST=CONFIGURED

# =============================================================================
# ENVIRONMENT-SPECIFIC EXAMPLES
# =============================================================================

# Local Development with Docker PostgreSQL
# DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/myapp_dev

# Testing with in-memory SQLite (fastest)
# DATABASE_URL=sqlite+aiosqlite:///:memory:

# Staging environment
# DATABASE_URL=postgresql+asyncpg://user:pass@staging-db:5432/myapp_staging

# Production with SSL and connection pooling
# DATABASE_URL=postgresql+asyncpg://user:pass@prod-db:5432/myapp_prod?ssl=require

# =============================================================================
# ASYNC DRIVER INSTALLATION
# =============================================================================

# Install required async drivers:
# 
# PostgreSQL (recommended):
#   pip install asyncpg
#
# MySQL:
#   pip install aiomysql
#
# SQLite (development):
#   pip install aiosqlite  # (sqlite3 is built into Python)

# =============================================================================
# MIGRATION NOTES
# =============================================================================

# This async-first application uses Alembic with async SQLAlchemy:
# - All migrations run asynchronously for optimal performance
# - Standard Alembic commands work seamlessly: alembic upgrade head
# - Supports PostgreSQL, MySQL, and SQLite async drivers